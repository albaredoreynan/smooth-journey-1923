:ruby
  require 'csv'
  csv_output = CSV.generate do |csv| 
    csv << ["Item Cost Analysis as of #{@ending_date.strftime("%-d-%b-%Y")}"]
    @branch_sel = Branch.find(params[:branch_id]) if params[:branch_id]
    csv << ["Branch : #{@branch_sel.location if @branch_sel}"]
    csv << ["Reference : BI = Beginning Inventory / TP = Total Purchases / EI = Ending Inventory / COGS = Cost Of Goods Sold"]
    
    @endcount
      csv << [
           'Item', 'Unit', 
           'BI Qty', 'BI Unit Cost', 'BI Total',
           'TP Qty', 'TP Unit Cost', 'TP Amount',
           'EI Qty', 'EI Unit Cost', 'EI Amount',
           'COGS Qty', 'COGS Unit Cost', 'COGS Amount', '%'
          ]
    
      grand_total_beginning_total = 0.0
      grand_total_purchase_amount = 0.0
      grand_total_ending_total = 0.0
      grand_total_cogs = 0.0  
      
      by_subcategory = @endcount.items.group_by { |i| i.subcategory }
      by_subcategory.each do |subcategory, items|
      
        subtotal_beginning_total = items.map(&:beginning_total).reject(&:nil?).inject(:+)
        grand_total_beginning_total += subtotal_beginning_total if subtotal_beginning_total
        
        subtotal_purchase_amount = items.map(&:purchase_amount_period).reject(&:nil?).inject(:+)
        grand_total_purchase_amount += subtotal_purchase_amount if subtotal_purchase_amount
        
        subtotal_ending_total = items.map(&:ending_total).reject(&:nil?).inject(:+)
        grand_total_ending_total += subtotal_ending_total if subtotal_ending_total

        subtotal_cogs = items.map(&:cogs).reject(&:nil?).inject(:+)
        grand_total_cogs += subtotal_cogs if subtotal_cogs    
        
        csv << [
                  subcategory.name.upcase, '',
                  '', '', number_to_currency(subtotal_beginning_total, :unit => peso_sign),
                  '', '', number_to_currency(subtotal_purchase_amount, :unit => peso_sign),
                  '', '', number_to_currency(subtotal_ending_total, :unit => peso_sign),
                  '', '', number_to_currency(subtotal_cogs, :unit => peso_sign),
                  ''
                ]
                
        items.each do |item|
          @units = Unit.find(item.unit_id)   
          csv << [   
                    item.name, @units.name, 
                    number_with_precision(item.beginning_count, :precision => 2, :delimiter => ','),
                    number_to_currency(item.unit_cost, :unit => peso_sign),
                    number_to_currency(item.beginning_total, :unit => peso_sign),
                    
                    number_with_precision(item.purchase_quantity, :precision => 2, :delimiter => ','),
                    number_to_currency(item.purchase_unit_cost, :unit => peso_sign),
                    number_to_currency(item.purchase_amount_period, :unit => peso_sign),
                      
                    number_with_precision(item.ending_count, :precision => 2, :delimiter => ','),
                    number_to_currency(item.ending_unit_cost, :unit => peso_sign),
                    number_to_currency(item.ending_total, :unit => peso_sign),
                      
                    number_with_precision(item.cogs_quantity, :precision => 2, :delimiter => ','),
                    number_to_currency(item.cogs_unit_cost, :unit => peso_sign),
                    number_to_currency(item.cogs, :unit => peso_sign),
                    ''
                  ]
        end

      end
      csv << [
               'Grand Total', '',
               '', '', number_to_currency(grand_total_beginning_total, :unit => peso_sign),
               '', '', number_to_currency(grand_total_purchase_amount, :unit => peso_sign),
               '', '', number_to_currency(grand_total_ending_total, :unit => peso_sign),
               '', '', number_to_currency(grand_total_cogs, :unit => peso_sign),
               ''
             ]
  end
  puts csv_output
